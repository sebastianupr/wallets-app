import Head from 'next/head'
import { useEffect, useState } from 'react'
import Papa from "papaparse"

const API_URL = 'https://api.covalenthq.com/v1/80001/address'
const API_VERSION = 'balances_v2'
const API_KEY = 'ckey_93e8217aefd746c5be8f6f24eb8';

const getWalletDetails = async (address) => {
  const endpoint = `${API_URL}/${address}/${API_VERSION}/?quote-currency=USD&format=JSON&nft=false&no-nft-fetch=false&key=${API_KEY}`;
  try {
    const response = await fetch(endpoint);
    const walletDetail = await response.json();
    return walletDetail;
  } catch (error) {
    console.log(error);
    return null
  }
}


export default function Home() {
  const [walletsFetched, setWalletsFetched] = useState([]);
  const [hasFinish, setHasFinish] = useState(false);
  const [time, setTime] = useState(0);

  console.log('walletsFetched', walletsFetched);

  useEffect(() => {
    if (!hasFinish) {
      setInterval(() => {
        setTime(currentTime => currentTime + 1_000);
      }, 1_000);
    }
  }, [hasFinish]);

  const fetchWallets = async () => {
    Papa.parse('./wallets_file.csv', {
      download: true,
      complete: async function (results) {
        const wallets = results.data.map((ele) => ele[0]).slice(1, results.data.length)

        const CHUNK_LIMIT = 35;

        const chunkedWallets = wallets.reduce((acc, _, index) => {
          if (index % CHUNK_LIMIT === 0) {
            const chunked = wallets.slice(index, index + CHUNK_LIMIT);
            return [...acc, chunked];
          }
          return acc;
        }, [])

        try {
          const LIMIT = chunkedWallets.length - 1;

          const CHUNK_DELAY = 2_800;
          const delayForEachChunk = () => new Promise(resolve => setTimeout(() => resolve(), CHUNK_DELAY))

          let currentChunkedWallet = 0;

          const fetchWallets = async (fetchChunkedWallets, resolve) => {
            const walletsToFetch = chunkedWallets[currentChunkedWallet]
              .filter(address => Boolean(address) && typeof address === 'string')
              .map(getWalletDetails);

            const response = await Promise.all(walletsToFetch);

            // If the response is not an array, it means that the API is down
            if (!response || response.length === 0 || !Array.isArray(response)) {
              return true
            }

            const transformedData = response.filter(Boolean).map(({ data }) => data);

            // Delay for each chunk, this is for server timeout
            await delayForEachChunk();

            setWalletsFetched(current => [...current, ...transformedData]);
            
            // Call next chunk
            if (currentChunkedWallet < LIMIT) {
              currentChunkedWallet++;
              fetchChunkedWallets(resolve)
              return false;
            }

            return true;
          }

          const fetchChunkedWallets = (currentResolve) => new Promise(async (resolve) => {
            const isFinish = await fetchWallets(fetchChunkedWallets, resolve);
            if (isFinish) currentResolve();
          })

          await fetchChunkedWallets();

          console.log('Finish !!');
        } catch (e) {
          // console.log('error', e)
        } finally {
          setHasFinish(true);
        }
      },
    })
  }

  useEffect(() => {
    fetchWallets();
  }, [])

  // format time miliseconds to seconds
  const formatTime = (time) => {
    const seconds = Math.floor(time / 1000);
    const minutes = Math.floor(seconds / 60);
    return seconds > 60 ? `${minutes}m` : `${seconds}s`;
  }

  return (
    <main>
      <Head>
        <title>Wallets</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container mx-auto">
        <div className="flex flex-wrap justify-center">
          <h3>Tiempo transcurrido: {formatTime(time)}</h3>
        </div>
        <table className="table-auto mx-auto">
          <thead>
            <tr>
              <th>Song</th>
              <th>Artist</th>
              <th>Year</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>The Sliding Mr. Bones (Next Stop, Pottersville)</td>
              <td>Malcolm Lockyer</td>
              <td>1961</td>
            </tr>
            <tr>
              <td>Witchy Woman</td>
              <td>The Eagles</td>
              <td>1972</td>
            </tr>
            <tr>
              <td>Shining Star</td>
              <td>Earth, Wind, and Fire</td>
              <td>1975</td>
            </tr>
          </tbody>
        </table>
      </div>
    </main>
  )
}
